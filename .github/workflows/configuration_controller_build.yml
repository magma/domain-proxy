name: Test and build configuration controller

on:
  push: 
  pull_request:
    paths:
      - "configuration_controller/**"
      - ".github/workflows/configuration_controller*.yml"

jobs:
  unit_tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: configuration_controller
    strategy:
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f tests/requirements.txt ]; then pip install -r tests/requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest

  build:
    needs: unit_tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: configuration_controller
    strategy:
      matrix:
        python-version: [3.8]
  
    steps:
    - uses: actions/checkout@v2
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

#    - name: Login to DockerHub Registry
#      run: |
#        echo ${{ secrets.DOCKERHUB_PASSWORD }} | \
#        docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
#    - name: Build configuration_controller
#      run: |
#        echo ${{ github.repository_owner }}
#        docker pull ${{ secrets.DOCKERHUB_USERNAME}}/configuration_controller:latest || true
#        docker build \
#        --pull \
#        --cache-from ${{ secrets.DOCKERHUB_USERNAME}}/configuration_controller:latest \
#        --tag ${{ secrets.DOCKERHUB_USERNAME}}/configuration_controller:$GITHUB_SHA .
#        docker push ${{ secrets.DOCKERHUB_USERNAME}}/configuration_controller:$GITHUB_SHA
    - name: Build configuration_controller
      run: |
        curl -i -u ${{ github.actor }}:${{ secrets.GITHUB_TOKEN }} https://api.github.com/users/{{ github.actor}}
        docker pull ghcr.io/${{ github.actor }}/configuration_controller:latest || true
        docker build \
        --pull \
        --cache-from ghcr.io/${{ github.actor }}/configuration_controller:latest \
        --tag ghcr.io/${{ github.actor }}/configuration_controller:$GITHUB_SHA .
        docker push ghcr.io/${{ github.actor }}/configuration_controller:$GITHUB_SHA
